name: Daily Market Data Pipeline

on:
  schedule:
    # KST 기준: 07:05, 15:40, 20:00
    # UTC 기준: 22:05 (전날), 06:40, 11:00
    - cron: '5 22 * * *'  # 07:05 KST (22:05 UTC)
    - cron: '40 6 * * *'  # 15:40 KST (06:40 UTC)
    - cron: '0 11 * * *'  # 20:00 KST (11:00 UTC)
  workflow_dispatch:
    inputs:
      session_type:
        description: '실행할 세션 타입'
        required: true
        default: 'morning'
        type: choice
        options:
        - morning
        - afternoon
        - evening

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-noto-cjk
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create data directory
      run: |
        mkdir -p data/$(date +%Y-%m-%d)
        mkdir -p logs
        
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}" >> $GITHUB_ENV
        echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> $GITHUB_ENV
        echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "REDDIT_USER_AGENT=${{ secrets.REDDIT_USER_AGENT }}" >> $GITHUB_ENV
        echo "BUFFER_ACCESS_TOKEN=${{ secrets.BUFFER_ACCESS_TOKEN }}" >> $GITHUB_ENV
        echo "BUFFER_PROFILE_ID=${{ secrets.BUFFER_PROFILE_ID }}" >> $GITHUB_ENV
        echo "FRED_API_KEY=${{ secrets.FRED_API_KEY }}" >> $GITHUB_ENV
        echo "THREADS_USERNAME=${{ secrets.THREADS_USERNAME }}" >> $GITHUB_ENV
        echo "THREADS_PASSWORD=${{ secrets.THREADS_PASSWORD }}" >> $GITHUB_ENV
        echo "USE_THREADS_API=${{ secrets.USE_THREADS_API }}" >> $GITHUB_ENV
        echo "FACEBOOK_ACCESS_TOKEN=${{ secrets.FACEBOOK_ACCESS_TOKEN }}" >> $GITHUB_ENV
        echo "IG_USER_ID=${{ secrets.IG_USER_ID }}" >> $GITHUB_ENV
        echo "USE_THREADS_AUTO=${{ secrets.USE_THREADS_AUTO }}" >> $GITHUB_ENV
        echo "TIMEZONE=Asia/Seoul" >> $GITHUB_ENV
        echo "DRY_RUN=false" >> $GITHUB_ENV
        echo "DATA_DIR=data" >> $GITHUB_ENV
        echo "PREVIEW_DIR=preview" >> $GITHUB_ENV
        
    - name: Determine session type
      id: session
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "session_type=${{ github.event.inputs.session_type }}" >> $GITHUB_OUTPUT
        else
          # 스케줄에 따른 세션 타입 결정
          current_hour=$(date -u +%H)
          if [ "$current_hour" = "22" ]; then
            echo "session_type=morning" >> $GITHUB_OUTPUT
          elif [ "$current_hour" = "06" ]; then
            echo "session_type=afternoon" >> $GITHUB_OUTPUT
          elif [ "$current_hour" = "11" ]; then
            echo "session_type=evening" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Debug environment
      run: |
        echo "=== 환경 디버깅 ==="
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Python path: $(which python)"
        echo "Available scripts:"
        ls -la scripts/
        echo "Environment variables check:"
        echo "OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
        echo "NEWS_API_KEY: ${NEWS_API_KEY:0:10}..."
        echo "BUFFER_ACCESS_TOKEN: ${BUFFER_ACCESS_TOKEN:0:10}..."
        echo "BUFFER_PROFILE_ID: $BUFFER_PROFILE_ID"
        echo "TIMEZONE: $TIMEZONE"
        echo "DRY_RUN: $DRY_RUN"
        
    - name: Test individual scripts
      run: |
        echo "=== 개별 스크립트 테스트 ==="
        
        # 스크립트 실행 권한 설정
        chmod +x scripts/*.py
        
        # 1. 미국 시장 데이터 수집 테스트
        echo "Testing fetch_us_markets.py..."
        python scripts/fetch_us_markets.py || echo "fetch_us_markets.py failed"
        
        # 2. GPT 요약 테스트
        echo "Testing gpt_summarize.py..."
        python scripts/gpt_summarize.py morning || echo "gpt_summarize.py failed"
        
    - name: Run pipeline
      run: |
        echo "=== 파이프라인 실행 ==="
        python scripts/github_scheduler.py ${{ steps.session.outputs.session_type }}
        
        echo "Pipeline completed with exit code: $?"
        
        # 데이터 생성 확인
        echo "=== 생성된 데이터 확인 ==="
        ls -la data/$(date +%Y-%m-%d)/ || echo "데이터 디렉토리가 없습니다"
        
        # 핵심 파일 존재 확인
        if [ -f "data/$(date +%Y-%m-%d)/slides_$(date +%Y-%m-%d).json" ]; then
          echo "✅ 슬라이드 데이터 생성 성공"
        else
          echo "❌ 슬라이드 데이터 생성 실패"
        fi
        
        if [ -f "data/$(date +%Y-%m-%d)/thread_post.json" ]; then
          echo "✅ Thread 포스트 데이터 생성 성공"
        else
          echo "❌ Thread 포스트 데이터 생성 실패"
        fi
        
        # 부분적 성공도 허용 (핵심 데이터가 생성되었으면 성공으로 간주)
        if [ -f "data/$(date +%Y-%m-%d)/slides_$(date +%Y-%m-%d).json" ] && [ -f "data/$(date +%Y-%m-%d)/thread_post.json" ]; then
          echo "🎉 핵심 데이터 생성 완료 - 성공으로 간주"
          exit 0
        else
          echo "❌ 핵심 데이터 생성 실패"
          exit 1
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pipeline-output-${{ steps.session.outputs.session_type }}-${{ github.run_id }}
        path: |
          data/
          logs/
        retention-days: 7
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Pipeline failed for session: ${{ steps.session.outputs.session_type }}"
        echo "Check the logs for more details" 